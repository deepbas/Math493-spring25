{
  "hash": "6749018ee5ba301919039a94cbf3f9dc",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Day 35\"\ntitle-slide-attributes:\n  data-background-image: images/lake.jpg\n  data-background-size: contain\n  data-background-opacity: \"0.5\"\nsubtitle: \"Math 216: Statistical Thinking\"\nauthor: \"Bastola\"\nformat:\n  revealjs:\n    html-math-method: mathjax\n    mathjax-url: \"https://cdnjs.cloudflare.com/ajax/libs/mathjax/3.2.2/MathJax.js\" \n    theme: [default, scss/main.scss]\n    slide-number: true\n    preview-links: auto\n    history: true\n    chalkboard: \n      src: drawings.json\n    transition: slide\n    background-transition: fade    \n    touch: false\n    controls: true\n---\n\n\n\n\n\n\n## \n\n\n\n```{=html}\n<iframe src=\"https://www.desmos.com/calculator/nr5qs8so4x?embed\" width=\"500\" height=\"500\" style=\"border: 1px solid #ccc\" frameborder=0></iframe>\n```\n\n\n\n\n## Introduction to Linear Relationships in Populations {.font80}\n\n::: cle6\n- **From Constants to Variables**: Transition from treating population means as constants to viewing them as variables dependent on other factors.\n- **Example**: Mean sale price of residences depending on square footage.\n  - Equation: $y = \\$30,000 + \\$60 \\times (\\text{Square feet})$\n  - This models the sale price as increasing with the living space in the residence.\n:::\n\n## Probabilistic Models in Statistics {.font80}\n\n::: cle7\n- **Deterministic vs. Probabilistic Models**:\n  - **Deterministic Model**: Assumes a perfect, predictable relationship without error, e.g., $y = 1.5x$.\n  - **Probabilistic Model**: Incorporates randomness, modeling $y$ as $y = 1.5x + \\text{random error}$.\n- **General Form**:\n  - $y = \\text{Deterministic component} + \\text{Random error}$\n  - Assumes mean of random error is 0, aligning $E(y)$ with the deterministic component.\n:::\n\n## Simple Linear Regression: The Straight-Line Model {.font80}\n\n::: cle12\n- **Fitting the Model**: Uses simple linear regression to relate the mean value of $y$ to $x$.\n  - Steps involve hypothesizing the relationship, estimating parameters, and evaluating the model's usefulness.\n- **Key Steps**:\n  - 1. Hypothesize the deterministic component (e.g., $E(y) = \\beta_0 + \\beta_1x$).\n  - 2. Estimate model parameters using least squares.\n  - 3. Assess the fit and use the model for prediction.\n:::\n\n## Implementing Regression Analysis {.font80}\n\n::: cle6\n- **Practical Example**: Analyzing drug effectiveness based on dosage percentage.\n  - Model reaction time as a function of drug concentration in the bloodstream.\n- **Methodology**:\n  - Use observed data to fit a linear model predicting reaction times.\n  - Calculate deviations to measure model fit and adjust parameters accordingly.\n:::\n\n## Step-by-Step: Least Squares Estimation {.font80}\n\n::: cle12\n> Example 1: Drug Effectiveness Study\n\n  - Given data on drug dosage and reaction times, fit a linear model to predict effects.\n  - Initial model: $y = -1 + x$, refined by least squares to minimize prediction errors.\n  - Evaluate the model by calculating the sum of squared errors (SSE) and using it to adjust the model.\n:::\n\n\n## Step-by-Step: Least Squares Estimation {.font80}\n\n::: cle13\n> Example 2: Relationship between Variables\n\n  - Consider a hypothetical study on political affiliation and support for policies.\n  - Use regression to understand how one variable predicts another within a population sample.\n:::\n\n\n\n## {.font60}\n\n> Example 2: \n\n\n<img src=\"images/Day29-1.png\" style=\"display: block; margin: auto;\" width=\"80%\"  loading=\"lazy\" decoding=\"async\">\n\n\n##\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}