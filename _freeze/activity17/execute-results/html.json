{
  "hash": "d2eaf446ac764487d75c441bc69b97a3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Activity17\"\nformat: html\nwarning: false\nmessage: false\n---\n\n::: {.cell}\n\n```{.r .cell-code}\n# Time Series Essentials, install if needed!\nlibrary(feasts)       # Feature extraction & decomposition\nlibrary(fable)        # Forecasting models (ARIMA, ETS, etc.)\nlibrary(fpp3)         # Tidy time series dataseta\nlibrary(astsa)        # Applied statistical TS methods from textbook\nlibrary(tseries)      # Unit root tests & TS diagnostics\nlibrary(tsibbledata)  # Curated TS datasets\nlibrary(quantmod)     # Financial data retrieval\nlibrary(tidyquant)    # Financial analysis in tidyverse\nlibrary(purrr)        # Functional programming for TS pipelines\nlibrary(readr)        # Efficient data import\nlibrary(gridExtra)\nlibrary(vars)\n```\n:::\n\n\n## Review of concepts and applications covered so far!\n\n\n1. Exploratory Data Analysis and Preprocessing\n\n- *Visualization:* Plot the raw time‐series data to inspect for trends, seasonality, and irregular fluctuations (including rolling means/variances).\n- *Transformations:* Apply appropriate transformations (e.g. logarithmic or Box–Cox) to stabilize variance.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Simulate a multivariate time series dataset with trend, seasonality, and noise\nset.seed(42)\nn <- 200\ndates <- seq.Date(as.Date(\"2021-01-01\"), by = \"day\", length.out = n)\ntrend1 <- seq(1, n) / 10\ntrend2 <- seq(1, n) / 12\nseason1 <- sin(2 * pi * (1:n) / 12)\nseason2 <- cos(2 * pi * (1:n) / 12)\nnoise1 <- rnorm(n, 0, 1)\nnoise2 <- rnorm(n, 0, 1)\ndata_df <- data.frame(\n  date = dates,\n  series1 = 50 + trend1 + season1 + noise1,\n  series2 = 30 + trend2 + season2 + noise2\n)\n\n# Convert to tsibble \nts_data <- as_tsibble(data_df, index = date)\n\n# Plot raw data for series1 and series2\np1 <- autoplot(ts_data, series1) +\n  labs(title = \"Raw Data: Series1\", y = \"Series1\")\np2 <- autoplot(ts_data, series2) +\n  labs(title = \"Raw Data: Series2\", y = \"Series2\")\ngrid.arrange(p1, p2, ncol = 2)\n```\n\n::: {.cell-output-display}\n![](activity17_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n2. Decomposition & Stationarity Testing\n\n- *Decomposition:* Use methods like STL to break the series into trend, seasonal, and remainder components.\n- *Detrending/Deseasonalizing:* Remove or model the trend and seasonal components so that the residual approximates white noise.\nStationarity Tests: Apply tests (e.g., ADF, KPSS) and difference the series as needed to achieve stationarity.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Decompose series1 using STL (additive model)\nstl_decomp <- ts_data %>%\n  model(STL(series1 ~ season(window = \"periodic\"))) %>%\n  components()\n\nautoplot(stl_decomp) +\n  labs(title = \"STL Decomposition of Series1\")\n```\n\n::: {.cell-output-display}\n![](activity17_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Inspect the remainder component as a proxy for stationarity\nautoplot(stl_decomp, remainder) +\n  labs(title = \"Remainder (Noise) Component of Series1\")\n```\n\n::: {.cell-output-display}\n![](activity17_files/figure-html/unnamed-chunk-3-2.png){width=672}\n:::\n:::\n\n\n3. Model Identification & Fitting\n\n- *Lag Selection:* Determine the optimal lag length (using criteria such as AIC or BIC) for an autoregressive or VAR model.\n- *Dynamic Modeling:* Fit an autoregressive model (or a VAR for multivariate data) on the stationary series.\nGranger Causality Testing: Within the VAR framework, test whether past values of one variable significantly improve the prediction of another.\n\n::: {.cell}\n\n```{.r .cell-code}\n# For VAR, we need a multivariate time series object.\nvar_data <- ts_data %>% as_tibble() %>% dplyr::select(series1, series2)\n             \n\n# Lag Selection: Use VARselect to determine optimal lag order \nlag_sel <- VARselect(var_data, lag.max = 10, type = \"const\")\nprint(lag_sel$selection)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAIC(n)  HQ(n)  SC(n) FPE(n) \n    10     10      3     10 \n```\n\n\n:::\n\n```{.r .cell-code}\n# Fit the VAR model with the chosen lag order\nvar_model <- VAR(var_data, p = 10, type = \"const\")\nsummary(var_model)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nVAR Estimation Results:\n========================= \nEndogenous variables: series1, series2 \nDeterministic variables: const \nSample size: 190 \nLog Likelihood: -533.265 \nRoots of the characteristic polynomial:\n    1 0.9659 0.9659 0.898 0.898 0.859 0.859 0.8513 0.8513 0.843 0.843 0.8371 0.8371 0.8034 0.8034 0.7746 0.7746 0.619 0.504 0.504\nCall:\nVAR(y = var_data, p = 10, type = \"const\")\n\n\nEstimation results for equation series1: \n======================================== \nseries1 = series1.l1 + series2.l1 + series1.l2 + series2.l2 + series1.l3 + series2.l3 + series1.l4 + series2.l4 + series1.l5 + series2.l5 + series1.l6 + series2.l6 + series1.l7 + series2.l7 + series1.l8 + series2.l8 + series1.l9 + series2.l9 + series1.l10 + series2.l10 + const \n\n             Estimate Std. Error t value Pr(>|t|)    \nseries1.l1   0.122877   0.076589   1.604 0.110499    \nseries2.l1   0.001737   0.074155   0.023 0.981337    \nseries1.l2   0.137280   0.076629   1.791 0.075004 .  \nseries2.l2   0.251250   0.072968   3.443 0.000725 ***\nseries1.l3   0.019961   0.077146   0.259 0.796153    \nseries2.l3   0.242982   0.075094   3.236 0.001460 ** \nseries1.l4   0.023500   0.076088   0.309 0.757815    \nseries2.l4   0.097273   0.075932   1.281 0.201926    \nseries1.l5   0.012457   0.075742   0.164 0.869564    \nseries2.l5   0.029780   0.075707   0.393 0.694549    \nseries1.l6  -0.100836   0.075910  -1.328 0.185848    \nseries2.l6  -0.001456   0.074714  -0.019 0.984472    \nseries1.l7  -0.130671   0.075732  -1.725 0.086275 .  \nseries2.l7   0.089534   0.074633   1.200 0.231951    \nseries1.l8   0.095971   0.075373   1.273 0.204667    \nseries2.l8   0.072311   0.075100   0.963 0.336990    \nseries1.l9   0.090060   0.073133   1.231 0.219861    \nseries2.l9  -0.098305   0.074922  -1.312 0.191266    \nseries1.l10  0.065699   0.074015   0.888 0.375991    \nseries2.l10  0.105207   0.073140   1.438 0.152163    \nconst        9.875173   2.622006   3.766 0.000229 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nResidual standard error: 1.039 on 169 degrees of freedom\nMultiple R-Squared: 0.9695,\tAdjusted R-squared: 0.9659 \nF-statistic: 268.9 on 20 and 169 DF,  p-value: < 2.2e-16 \n\n\nEstimation results for equation series2: \n======================================== \nseries2 = series1.l1 + series2.l1 + series1.l2 + series2.l2 + series1.l3 + series2.l3 + series1.l4 + series2.l4 + series1.l5 + series2.l5 + series1.l6 + series2.l6 + series1.l7 + series2.l7 + series1.l8 + series2.l8 + series1.l9 + series2.l9 + series1.l10 + series2.l10 + const \n\n            Estimate Std. Error t value Pr(>|t|)   \nseries1.l1   0.12196    0.07744   1.575  0.11716   \nseries2.l1   0.13703    0.07498   1.828  0.06938 . \nseries1.l2  -0.10699    0.07748  -1.381  0.16918   \nseries2.l2   0.04090    0.07378   0.554  0.58004   \nseries1.l3  -0.03307    0.07801  -0.424  0.67214   \nseries2.l3   0.01991    0.07593   0.262  0.79352   \nseries1.l4   0.01795    0.07694   0.233  0.81577   \nseries2.l4   0.01205    0.07678   0.157  0.87548   \nseries1.l5   0.05329    0.07659   0.696  0.48752   \nseries2.l5  -0.01524    0.07655  -0.199  0.84241   \nseries1.l6   0.03161    0.07676   0.412  0.68102   \nseries2.l6  -0.07952    0.07555  -1.053  0.29405   \nseries1.l7   0.12927    0.07658   1.688  0.09323 . \nseries2.l7  -0.08456    0.07547  -1.120  0.26410   \nseries1.l8   0.01776    0.07621   0.233  0.81601   \nseries2.l8   0.01472    0.07594   0.194  0.84653   \nseries1.l9   0.22280    0.07395   3.013  0.00299 **\nseries2.l9   0.05090    0.07576   0.672  0.50259   \nseries1.l10  0.19784    0.07484   2.644  0.00898 **\nseries2.l10  0.13111    0.07396   1.773  0.07806 . \nconst       -8.85007    2.65124  -3.338  0.00104 **\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nResidual standard error: 1.05 on 169 degrees of freedom\nMultiple R-Squared: 0.9561,\tAdjusted R-squared: 0.9509 \nF-statistic: 184.1 on 20 and 169 DF,  p-value: < 2.2e-16 \n\n\n\nCovariance matrix of residuals:\n        series1 series2\nseries1 1.07898 0.05327\nseries2 0.05327 1.10317\n\nCorrelation matrix of residuals:\n        series1 series2\nseries1 1.00000 0.04883\nseries2 0.04883 1.00000\n```\n\n\n:::\n:::\n\n\n\n4. Impulse Response Analysis\n\n- *IRF Computation:* After estimating the VAR, compute impulse response functions to trace how shocks to one variable affect the system over time.\n- *Interpretation:* Use IRFs to quantify the duration and magnitude of shock effects, complementing the Granger causality findings.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Compute the impulse response function for the effect of a shock in series1 on series2 (12 periods ahead)\nirf_result <- irf(var_model, impulse = \"series1\", response = \"series2\",\n                  n.ahead = 18, boot = TRUE)\nplot(irf_result)\n```\n\n::: {.cell-output-display}\n![](activity17_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n5. Diagnostics & Forecasting\n\n- *Residual Analysis:* Check that the model’s residuals resemble white noise (e.g., via Ljung–Box tests) to validate the model fit.\nForecasting: Employ the fitted model to forecast future values, reintroducing trend and seasonal components as needed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Diagnostics: Test for serial correlation in the VAR residuals (using 12 lags)\nserial_test <- serial.test(var_model, lags.pt = 12, type = \"PT.adjusted\")\nprint(serial_test)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tPortmanteau Test (adjusted)\n\ndata:  Residuals of VAR object var_model\nChi-squared = 23.058, df = 8, p-value = 0.003291\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$serial\n\n\tPortmanteau Test (adjusted)\n\ndata:  Residuals of VAR object var_model\nChi-squared = 23.058, df = 8, p-value = 0.003291\n```\n\n\n:::\n\n```{.r .cell-code}\n# Forecasting: Forecast the next 12 periods using the VAR model\nvar_forecast <- predict(var_model, n.ahead = 12)\nplot(var_forecast)\n```\n\n::: {.cell-output-display}\n![](activity17_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n",
    "supporting": [
      "activity17_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}